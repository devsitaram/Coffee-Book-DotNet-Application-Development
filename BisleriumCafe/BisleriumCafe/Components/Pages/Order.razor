@page "/order/{CoffeeName}/{CoffeePrice}"

<div class="container">
    <h1>Order Coffee</h1>
    <div class="coffee-details">
        <label for="coffeeName">Coffee Name:</label>
        <input id="coffeeName" class="form-control" readonly value="@CoffeeName" />

        <label for="coffeePrice">Coffee Price:</label>
        <input id="coffeePrice" class="form-control price-input" readonly @bind="@ParseCoffeePrice" />
        <br />

        <div class="add">
            <div class="add-in-input">
                <label for="add">Add in flavors</label>
                <div class="add-in-input">
                    <select id="add-ins" class="form-control" @onchange="(args) => CalculateTotalCoffeePrice(args.Value.ToString())">
                        @foreach (var addIn in listOfAddIns)
                        {
                            <option value="@addIn.AddPrice">@($"{addIn.AddName} - Rs {addIn.AddPrice}")</option>
                        }
                    </select>
                </div>
            </div>
        </div>

        <label for="customerNumber">Customer Number:</label>
        <input id="customerNumber" class="form-control" value="@CustomerNumber" /><br />

        <label for="sugar">Total Price:</label>
        <div class="price-display">$@TotalCoffeePrice</div><br />

        <button class="btn btn-primary">Confirm</button>
    </div>
</div>

@code {
    [Parameter]
    public string CoffeeName { get; set; }

    [Parameter]
    public string CoffeePrice { get; set; }

    public int CustomerNumber { get; set; }

    public double ParseCoffeePrice { get; set; }

    public double TotalCoffeePrice { get; set; }

    private List<CoffeeAddIn> listOfAddIns;
    private CoffeeAddIn addInsModel = new();

    protected override void OnInitialized()
    {
        try
        {
            listOfAddIns = CoffeeAddInServices.GetAllAddIn();
            if (double.TryParse(CoffeePrice, out double parsedPrice))
            {
                ParseCoffeePrice = parsedPrice;
            }
            else
            {
                ParseCoffeePrice = 0;
            }
            // Initial calculation
            TotalCoffeePrice = ParseCoffeePrice;
        }
        catch (Exception ex)
        {
            listOfAddIns = new List<CoffeeAddIn>();
            Console.WriteLine($"Error in OnInitialized: {ex.Message}");
        }
    }

    private void CalculateTotalCoffeePrice(string selectedPrice)
    {
        if (double.TryParse(selectedPrice, out double addInPrice))
        {
            TotalCoffeePrice = ParseCoffeePrice + addInPrice;
        }
    }
}


<style>
    .container {
        margin: 20px auto;
        max-width: 600px;
        padding: 0 20px;
    }

    .coffee-details {
        margin-bottom: 20px;
    }

    label {
        display: block;
        margin-bottom: 5px;
        font-weight: bold;
    }

    .form-control {
        width: 100%;
        padding: 8px;
        margin-bottom: 10px;
        border: 1px solid #ccc;
        border-radius: 4px;
        box-sizing: border-box;
    }

    .price-input {
        color: #333;
        font-weight: bold;
    }

    .price-display {
        margin-top: 10px;
        padding: 8px;
        background-color: #f0f0f0;
        font-weight: bold;
    }
</style>