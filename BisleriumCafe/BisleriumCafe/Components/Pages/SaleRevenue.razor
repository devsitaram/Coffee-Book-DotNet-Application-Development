@page "/revenue"

<div class="container" style="display: flex; flex-direction: column; width: 100%">

    <h2 style="display: flex; justify-content: space-between:center">Bislerium Cafe Sales History</h2>
    <br />
    <div style="display: flex; justify-content: space-between">
        <div class="container">
            <div class="row">
                <div class="col-md-4">
                    <div class="dropdown">
                        <button class="dropbtn btn dropdown-toggle" style="background-color:rebeccapurple" data-bs-toggle="dropdown">Sorting By</button>
                        <div class="dropdown-content">
                            <button type="submit" @onclick='() => SortColumn("Name")'>Coffee Name</button>
                            <button type="submit" @onclick='() => SortColumn("Price")'>Coffee Price</button>
                            <button type="submit" @onclick='() => SortColumn("Total")'>Total Price</button>
                        </div>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="dropdown">
                        <button class="dropbtn btn btn-danger dropdown-toggle" data-bs-toggle="dropdown">Export By</button>
                        <div class="dropdown-content">
                            <button @onclick="PDFGenerate">PDF</button>
                            <button @onclick="CSVGenerate">CSV</button>
                            <button @onclick="JSONGenerate">JSON</button>
                            <button @onclick="ExcelGenerate">EXCEL</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="container">
            <div class="row">
                <div class="col-md-9">
                    <input @bind="searchTerm" class="form-control mb-6" type="search" placeholder="Search by name" aria-label="Search">
                </div>
                <div class="col-md-3">
                    <button class="btn btn-outline-success mb-2" @onclick="Search">Search</button>
                </div>
            </div>
        </div>
    </div><br />
   
    @if (!string.IsNullOrEmpty(successMessage))
    {
        <div class="alert alert-success" role="alert">
            @successMessage
        </div>
    }

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-success" role="alert">
            @errorMessage
        </div>
    }

    <div><br />
        <h3 for="coffeeName">Sales Transactions</h3>
        <table class="table table-bordered">
            <thead>
                <tr>
                    <th>Coffee Name</th>
                    <th>Coffee Price</th>
                    <th>Add In Flavor</th>
                    <th>Add In Price</th>
                    <th>Customer Number</th>
                    <th>Total Price</th>
                    <th>Order Date</th>
                </tr>
            </thead>
            <tbody>
                @if (!string.IsNullOrEmpty(searchTerm))
                {
                    @foreach (var orderCoffee in filteredCoffeeOrders)
                    {
                        <tr>
                            <td>@orderCoffee.CoffeeName</td>
                            <td>@orderCoffee.CoffeePrice</td>
                            <td>@orderCoffee.AddFlavorName</td>
                            <td>@orderCoffee.AddFlavorPrice</td>
                            <td>@orderCoffee.CustomerNumber</td>
                            <td>@orderCoffee.TotalPrice</td>
                            <td>@orderCoffee.OrderDate</td>
                        </tr>
                    }
                }
                else
                {
                    @foreach (var orderCoffee in listOfCoffeeOrder)
                    {
                        <tr>
                            <td>@orderCoffee.CoffeeName</td>
                            <td>@orderCoffee.CoffeePrice</td>
                            <td>@orderCoffee.AddFlavorName</td>
                            <td>@orderCoffee.AddFlavorPrice</td>
                            <td>@orderCoffee.CustomerNumber</td>
                            <td>@orderCoffee.TotalPrice</td>
                            <td>@orderCoffee.OrderDate</td>
                        </tr>
                    }
                }
                
            </tbody>
        </table>
    </div>
</div>

@code {
    private List<CoffeeOrder> listOfCoffeeOrder;
    private CoffeeOrder coffeeOrderModel = new();
    private string successMessage = "";
    private string errorMessage = "";

    // sorting functions
    private string sortedColumn = "";
    private bool sortAsc = true;

    // New property for search term
    private string searchTerm = "";
    private List<CoffeeOrder> filteredCoffeeOrders;

    protected override void OnInitialized()
    {
        try
        {
            listOfCoffeeOrder = OrderService.GetAllOrders();
            // Initialize filteredCoffeeOrders with all data initially
            filteredCoffeeOrders = new List<CoffeeOrder>(listOfCoffeeOrder);
        }
        catch
        {
            listOfCoffeeOrder = new List<CoffeeOrder>();
            filteredCoffeeOrders = new List<CoffeeOrder>();
        }
    }

    private async Task PDFGenerate()
    {
        var response = PDFServices.PDFFileOrderHistoryGenerate();
        if(response == null)
        {
            errorMessage = "Fails to PDF report file generate!";
        } 
        else
        {
            successMessage = response;
        }
        await Task.Delay(2000); // Wait for 1 second
        ClearMessage();
    }

    private async Task CSVGenerate()
    {
        var response = CSVServices.CSVFileGenerate();
        if (response == null)
        {
            errorMessage = "Fails to CSV report file generate!";
        }
        else
        {
            successMessage = response;
        }
        await Task.Delay(2000); // Wait for 1 second
        ClearMessage();
    }

    private async Task JSONGenerate()
    {
        var response = JSONServices.JSONFileGenerate(listOfCoffeeOrder);
        if (response == null)
        {
            errorMessage = "Fails to JSON report file generate!";
        }
        else
        {
            successMessage = response;
        }
        await Task.Delay(2000); // Wait for 1 second
        ClearMessage();
    }

    private async Task ExcelGenerate()
    {
        var response = ExcelServices.ExcelFileGenerate();
        if (response == null)
        {
            errorMessage = "Fails to EXCEL report file generate!";
        }
        else
        {
            successMessage = response;
        }
        await Task.Delay(2000); // Wait for 1 second
        ClearMessage();
    }

    private void ClearMessage()
    {
        successMessage = "";
        errorMessage = "";
    }

    private void SortColumn(string columnName)
    {
        if (sortedColumn == columnName)
        {
            sortAsc = !sortAsc;
        }
        else
        {
            sortAsc = true;
            sortedColumn = columnName;
        }

        switch (columnName)
        {
            case "Name":
                if (sortAsc)
                    listOfCoffeeOrder = listOfCoffeeOrder.OrderBy(x => x.CoffeeName).ToList();
                else
                    listOfCoffeeOrder = listOfCoffeeOrder.OrderByDescending(x => x.CoffeeName).ToList();
                break;

            case "Price":
                if (sortAsc)
                    listOfCoffeeOrder = listOfCoffeeOrder.OrderBy(x => x.CoffeePrice).ToList();
                else
                    listOfCoffeeOrder = listOfCoffeeOrder.OrderByDescending(x => x.CoffeePrice).ToList();
                break;

            case "Total":
                if (sortAsc)
                    listOfCoffeeOrder = listOfCoffeeOrder.OrderBy(x => x.TotalPrice).ToList();
                else
                    listOfCoffeeOrder = listOfCoffeeOrder.OrderByDescending(x => x.TotalPrice).ToList();
                break;

            // Add cases for other columns if needed
            default:
                break;
        }

        // Trigger UI update after sorting
        StateHasChanged();
    }

    // order history search by coffee name search
    private void Search()
    {
        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            // Filter the list based on the search term
            filteredCoffeeOrders = listOfCoffeeOrder
                .Where(order => order.CoffeeName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();
        }
        else
        {
            // If search term is empty, display all data
            filteredCoffeeOrders = new List<CoffeeOrder>(listOfCoffeeOrder);
        }
    }
}

<style>

    .align-content-end {
        align-items: flex-end; /* for flexbox */
        justify-items: end; /* for grid */
    }

    /* Hide overflow and enable scrolling for the table */
    table {
        width: 100%;
        border-collapse: collapse;
        overflow-x: auto; /* Enable horizontal scrolling */
        display: block; /* Enable overflow property */
    }

    /* Style table headers */
    th {
        background-color: #f2f2f2;
        text-align: left;
        padding: 8px;
    }

    /* Style table data cells */
    td {
        padding: 8px;
        border-bottom: 1px solid #ddd;
    }

    /* Set a maximum width for table cells */
    td, th {
        max-width: 250px; /* Adjust as needed */
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis; /* Display ellipsis for overflowing content */
    }

    /* Style the dropdown button */
    .dropbtn {
        background-color: #FF3333;
        padding: 10px;
        font-size: 16px;
        border: 1px solid;
        cursor: pointer;
        border-radius: 8px;
        color: #FFFFFF;
    }

    /* Style the dropdown content (the list of buttons) */
    .dropdown-content {
        display: none;
        position: absolute;
        background-color: #FFFFFF;
        min-width: 100px;
        box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);
        z-index: 1;
        border-radius: 8px;
    }

    /* Show the dropdown content (the list of buttons) on hover */
    .dropdown:hover .dropdown-content {
        display: block;
    }

    /* Style the buttons within the dropdown */
    .dropdown-content button {
        width: 100%;
        padding: 8px 16px;
        text-align: left;
        border: none;
        background-color: transparent;
        cursor: pointer;
        border-radius: 8px;
    }

        /* Change background color of buttons on hover */
        .dropdown-content button:hover {
            background-color: #3333FF;
            color: #FFFFFF;
            border-radius: 8px;
        }
</style>
